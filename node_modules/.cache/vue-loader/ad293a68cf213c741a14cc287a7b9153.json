{"remainingRequest":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/kolesa-vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/kolesa-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/kolesa-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/kolesa-vue/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/kolesa-vue/src/App.vue","mtime":1634746170236},{"path":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/kolesa-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/kolesa-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/kolesa-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/kolesa-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}