{"remainingRequest":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/src/components/Modal.vue?vue&type=template&id=701ac82d&","dependencies":[{"path":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/src/components/Modal.vue","mtime":1635373266664},{"path":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/akmaralongarova96gmail.com/Documents/Kolesa-Upgrade-FE-2021/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}